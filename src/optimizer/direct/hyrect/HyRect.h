#ifndef SIMOPTICON_HYRECT_H
#define SIMOPTICON_HYRECT_H

/**
 * @dir
 * In this directory, classes of the hyrect module are defined and implemented.
 */

/**
 * @file
 * In this file, the header of the HyRect class is defined.
 */

#include "../../../Types.h"
#include "../DirectTypes.h"

#include <optional>
#include <array>
#include <vector>
#include <cmath>
#include <list>
#include <memory>

/**
 * This module contains the definition of a tree-like data structure representing the partition of a search space into multiple hyper-rectangles (HyRect).
 * @defgroup hyrect hyrect
 * @ingroup direct
 */

/**
 * An enum representing the position of a HyRect relative to its parent HyRect.
 * If it is a BaseRect and therefore has no parent, BASE is used.
 * @ingroup hyrect
 */
enum class position : char {
    LEFT = 0, MIDDLE = 1, RIGHT = 2, BASE = -1
};

/**
 * An abstract class representing a rectangular part of the search space.
 * @ingroup hyrect
 */
class HyRect {
protected:
    /**
     * Dimensionality of the rectangle.
     * Is equivalent to the dimensionality of the search space, i.e. the number of optimized parameters.
     */
    dimension D;
    /**
     * Depth of the rectangle in the partition tree.
     * Equal to the number of transitive parent rectangles. For BaseRect, @a t is always 0.
     */
    depth t;
    /**
     * Position of the rectangle relative to its parent rectangle.
     * For BaseRect, @a pos is always BASE.
     */
    position pos;
    /**
     * Mean between the values obtained at the parameters returned by #getSamplingVertices.
     */
    functionValue avgValue = INFINITY;

public:
    /**
     * Creates a HyRect with the given dimensionality, position and depth.
     * @param D: Dimensionality of the rectangle (i.e. the search space).
     * @param pos: Position relative to parent rectangle.
     * @param t: Depth of the rectangle in partition tree.
     */
    HyRect(dimension D, position pos, depth t);

    /**
     * Divides the given rectangle into three smaller ChildRect which take the given HyRect as a parent.
     * @param ptr: Reference to a shared_ptr to the HyRect that is being divided.
     * @return An array of ChildRect instances generated by dividing the given HyRect.
     */
    [[nodiscard]] static std::array<std::shared_ptr<HyRect>, 3> divide(const std::shared_ptr<HyRect> &ptr);

    /**
     * Returns the coordinates of two opposite corner points of the rectangle.
     * The returned vertices must be sampled.
     * @return An array containing two dirCoordinate vectors of the sampled vertices.
     */
    virtual std::array<std::vector<dirCoordinate>, 2> getSamplingVertices() = 0;

    /**
     * Returns the length of the diagonal of the rectangle.
     * Basically calculates the euclidian distance between the vertices returned by #getSamplingVertices.
     * Instead of actually invoking the costly recursive #getSamplingVertices function, a calculation based on #t is executed
     * @return A dirCoordinate representing the diagonal length of the rectangle.
     */
    [[nodiscard]] dirCoordinate getDiagonalLength() const;

    /**
     * Returns the value of #t.
     * @return A depth value representing the depth of the rectangle in the partition tree.
     */
    [[nodiscard]] depth getDepth() const;

    /**
     * Returns the value of #pos.
     * @return A position value representing the relative position to the parent rectangle.
     */
    [[nodiscard]] position getPos() const;

    /**
     * Calculates the dimension where this rectangle must be or has been split by #divide.
     * Since the split dimensions are simply chosen in ascending order the calculations only needs the depth stored in #t.
     * @return A dimension where the HyRect has been oder will be split.
     */
    [[nodiscard]] dimension getSplitDim() const;

    /**
     * Returns the value of #avgValue.
     * @return A functionValue representing the average value on the sampled corners of the rectangle.
     */
    [[nodiscard]] functionValue getAvgValue() const;

    /**
     * Returns the value of #D.
     * @return A dimension representing the number of dimensions of the rectangle.
     */
    [[nodiscard]] dimension getD() const;

    /**
     * Sets the value of #avgValue.
     * @param value: Average value sampled at the corners of the rectangle.
     */
    void setAvgValue(functionValue value);

    /**
     * Checks if the current and the given HyRect objects are equal by comparing their #pos, #D, and #t.
     * @param rect: HyRect to be compared.
     * @return A boolean defining if the HyRect objects have the same position in the partition tree.
     */
    virtual bool operator==(const HyRect &rect) const;

    /**
     * Compares depth #t and #avgValue of the given HyRect objects.
     * @param rect: HyRect to be compared.
     * @return A boolean defining if the depth #t of this HyRect is greater than that of the given HyRect or
     * whether the #avgValue is less than that of the given HyRect if depth #t is the same.
     */
    bool operator<(const HyRect &rect) const;

    /**
     * Checks if the current and the given HyRect objects are unequal by comparing their #pos, #D, and #t.
     * Basically negates #operator==.
     * @param rhs: HyRect to be compared.
     * @return A boolean defining if the HyRect objects have different positions in the partition tree.
     */
    bool operator!=(const HyRect &rhs) const;

    /**
     * Compares depth #t and #avgValue of the given HyRect objects.
     * Basically calls #operator< on the switched inputs.
     * @param rhs: HyRect to be compared.
     * @return A boolean defining if the depth #t of this HyRect is less or equal than that of the given HyRect or
     * whether the #avgValue is greater than or equal that of the given HyRect if depth #t is the same.
     */
    bool operator>(const HyRect &rhs) const;

    /**
     * Compares depth #t and #avgValue of the given HyRect objects.
     * Basically negates #operator>.
     * @param rhs: HyRect to be compared.
     * @return A boolean defining if the depth #t of this HyRect is greater than or equal to that of the given HyRect or
     * whether the #avgValue is less than or equal that of the given HyRect if depth #t is the same.
     */
    bool operator<=(const HyRect &rhs) const;

    /**
     * Compares depth #t and #avgValue of the given HyRect objects.
     * Basically negates #operator<.
     * @param rhs: HyRect to be compared.
     * @return A boolean defining if the depth #t of this HyRect is less than or equal that of the given HyRect or
     * whether the #avgValue is greater than or equal that of the given HyRect if depth #t is the same.
     */
    bool operator>=(const HyRect &rhs) const;
};

namespace std {
    template<>
    /**
     * Hash function necessary for saving HyRect in STL containers.
     * @ingroup hyrect
     */
    struct [[maybe_unused]] hash<HyRect> {
        size_t operator()(const HyRect &x) const {
            return hash<double>()(
                    pow((int) x.getPos() + 2, x.getSplitDim() * x.getDepth() + 1) + (double) x.getAvgValue());
        }
    };
}

#endif //SIMOPTICON_HYRECT_H
