<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Simopticon: SimulationRunner Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Simopticon
   &#160;<span id="projectnumber">1.0</span>
   </div>
   <div id="projectbrief">A framework for the optimization of simulation parameters.</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classSimulationRunner.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pri-methods">Private Member Functions</a> &#124;
<a href="classSimulationRunner-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">SimulationRunner Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span><div class="ingroups"><a class="el" href="group__runner.xhtml">runner</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>A class capable of running simulations with certain parameterCombinations.  
 <a href="classSimulationRunner.xhtml#details">More...</a></p>

<p><code>#include &quot;<a class="el" href="SimulationRunner_8h_source.xhtml">SimulationRunner.h</a>&quot;</code></p>
<div class="dynheader">
Inheritance diagram for SimulationRunner:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classSimulationRunner__inherit__graph.svg" width="348" height="396"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Collaboration diagram for SimulationRunner:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classSimulationRunner__coll__graph.svg" width="348" height="320"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a2a41b4b74ffb111ede54937551266a53"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSimulationRunner.xhtml#a2a41b4b74ffb111ede54937551266a53">SimulationRunner</a> (unsigned int threads)</td></tr>
<tr class="memdesc:a2a41b4b74ffb111ede54937551266a53"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a <a class="el" href="classSimulationRunner.xhtml" title="A class capable of running simulations with certain parameterCombinations.">SimulationRunner</a> which can use no more than the given number of threads to simulate parameterCombinations concurrently.  <a href="classSimulationRunner.xhtml#a2a41b4b74ffb111ede54937551266a53">More...</a><br /></td></tr>
<tr class="separator:a2a41b4b74ffb111ede54937551266a53"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37f73e47fd21b1167be2c44ab36e6254"><td class="memItemLeft" align="right" valign="top">virtual std::map&lt; <a class="el" href="Types_8h.xhtml#ac86955a0dc006fe09cd1a6303638a8b9">parameterCombination</a>, std::pair&lt; std::filesystem::path, std::set&lt; <a class="el" href="Types_8h.xhtml#a057a8240c128713802bc4f54e877e8df">runId</a> &gt; &gt;, <a class="el" href="structCmpVectorSharedParameter.xhtml">CmpVectorSharedParameter</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSimulationRunner.xhtml#a37f73e47fd21b1167be2c44ab36e6254">runSimulations</a> (const std::set&lt; <a class="el" href="Types_8h.xhtml#ac86955a0dc006fe09cd1a6303638a8b9">parameterCombination</a>, <a class="el" href="structCmpVectorSharedParameter.xhtml">CmpVectorSharedParameter</a> &gt; &amp;runs)</td></tr>
<tr class="memdesc:a37f73e47fd21b1167be2c44ab36e6254"><td class="mdescLeft">&#160;</td><td class="mdescRight">Simulates the given parameterCombinations concurrently and returns their respective results.  <a href="classSimulationRunner.xhtml#a37f73e47fd21b1167be2c44ab36e6254">More...</a><br /></td></tr>
<tr class="separator:a37f73e47fd21b1167be2c44ab36e6254"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a884a6bee886f30ba251897387336f04b"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSimulationRunner.xhtml#a884a6bee886f30ba251897387336f04b">getName</a> () override</td></tr>
<tr class="memdesc:a884a6bee886f30ba251897387336f04b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a string representing the name of the implementing component in natural language.  <a href="classSimulationRunner.xhtml#a884a6bee886f30ba251897387336f04b">More...</a><br /></td></tr>
<tr class="separator:a884a6bee886f30ba251897387336f04b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac223588e17ea7c69402e75be1f1ef0e1"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSimulationRunner.xhtml#ac223588e17ea7c69402e75be1f1ef0e1">getStatus</a> () override</td></tr>
<tr class="memdesc:ac223588e17ea7c69402e75be1f1ef0e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a string representing the current state of the implementing component.  <a href="classSimulationRunner.xhtml#ac223588e17ea7c69402e75be1f1ef0e1">More...</a><br /></td></tr>
<tr class="separator:ac223588e17ea7c69402e75be1f1ef0e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af433c6cf68f7b9699251b96919d72152"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSimulationRunner.xhtml#af433c6cf68f7b9699251b96919d72152">getStatusBar</a> () override</td></tr>
<tr class="memdesc:af433c6cf68f7b9699251b96919d72152"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a string representing the current progress of the calculations of the implementing component.  <a href="classSimulationRunner.xhtml#af433c6cf68f7b9699251b96919d72152">More...</a><br /></td></tr>
<tr class="separator:af433c6cf68f7b9699251b96919d72152"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classMultithreaded"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classMultithreaded')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classMultithreaded.xhtml">Multithreaded&lt; parameterCombination, std::pair&lt; std::filesystem::path, std::set&lt; runId &gt; &gt;, CmpVectorSharedParameter &gt;</a></td></tr>
<tr class="memitem:abb856a33aad9a1cc76a91c15c40bef8e inherit pub_methods_classMultithreaded"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMultithreaded.xhtml#abb856a33aad9a1cc76a91c15c40bef8e">Multithreaded</a> (unsigned int threads)</td></tr>
<tr class="memdesc:abb856a33aad9a1cc76a91c15c40bef8e inherit pub_methods_classMultithreaded"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a <a class="el" href="classMultithreaded.xhtml" title="A class implementing concurrent execution of the same function for different arguments.">Multithreaded</a> class that does not use more than the given number of threads.  <a href="classMultithreaded.xhtml#abb856a33aad9a1cc76a91c15c40bef8e">More...</a><br /></td></tr>
<tr class="separator:abb856a33aad9a1cc76a91c15c40bef8e inherit pub_methods_classMultithreaded"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-methods"></a>
Private Member Functions</h2></td></tr>
<tr class="memitem:adfe03a3ba517b5aca991dee71155bbec"><td class="memItemLeft" align="right" valign="top">std::pair&lt; std::filesystem::path, std::set&lt; <a class="el" href="Types_8h.xhtml#a057a8240c128713802bc4f54e877e8df">runId</a> &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSimulationRunner.xhtml#adfe03a3ba517b5aca991dee71155bbec">work</a> (<a class="el" href="Types_8h.xhtml#ac86955a0dc006fe09cd1a6303638a8b9">parameterCombination</a> run) override=0</td></tr>
<tr class="memdesc:adfe03a3ba517b5aca991dee71155bbec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Deals with the simulation of a single parameterCombination.  <a href="classSimulationRunner.xhtml#adfe03a3ba517b5aca991dee71155bbec">More...</a><br /></td></tr>
<tr class="separator:adfe03a3ba517b5aca991dee71155bbec"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pro_methods_classMultithreaded"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classMultithreaded')"><img src="closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="classMultithreaded.xhtml">Multithreaded&lt; parameterCombination, std::pair&lt; std::filesystem::path, std::set&lt; runId &gt; &gt;, CmpVectorSharedParameter &gt;</a></td></tr>
<tr class="memitem:a1fcc1c0642faa664e11fefadde148b5f inherit pro_methods_classMultithreaded"><td class="memItemLeft" align="right" valign="top">virtual std::map&lt; <a class="el" href="Types_8h.xhtml#ac86955a0dc006fe09cd1a6303638a8b9">parameterCombination</a>, std::pair&lt; std::filesystem::path, std::set&lt; <a class="el" href="Types_8h.xhtml#a057a8240c128713802bc4f54e877e8df">runId</a> &gt; &gt;, <a class="el" href="structCmpVectorSharedParameter.xhtml">CmpVectorSharedParameter</a>, std::allocator&lt; std::pair&lt; const <a class="el" href="Types_8h.xhtml#ac86955a0dc006fe09cd1a6303638a8b9">parameterCombination</a>, std::pair&lt; std::filesystem::path, std::set&lt; <a class="el" href="Types_8h.xhtml#a057a8240c128713802bc4f54e877e8df">runId</a> &gt; &gt; &gt;&gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMultithreaded.xhtml#a1fcc1c0642faa664e11fefadde148b5f">runMultithreadedFunctions</a> (std::set&lt; <a class="el" href="Types_8h.xhtml#ac86955a0dc006fe09cd1a6303638a8b9">parameterCombination</a>, <a class="el" href="structCmpVectorSharedParameter.xhtml">CmpVectorSharedParameter</a> &gt; runs)</td></tr>
<tr class="memdesc:a1fcc1c0642faa664e11fefadde148b5f inherit pro_methods_classMultithreaded"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pushes given tasks into <a class="el" href="classMultithreaded.xhtml#af18b358906f0dd910122e6541c46f45e" title="ThreadsafeQueue containing the arguments that have to be processed by the ThreadPool.">queue</a>, creates concurrent threads and merges them when execution is done.  <a href="classMultithreaded.xhtml#a1fcc1c0642faa664e11fefadde148b5f">More...</a><br /></td></tr>
<tr class="separator:a1fcc1c0642faa664e11fefadde148b5f inherit pro_methods_classMultithreaded"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a417daf5d214dc7046af294dba9979624 inherit pro_methods_classMultithreaded"><td class="memItemLeft" align="right" valign="top">virtual std::map&lt; <a class="el" href="Types_8h.xhtml#ac86955a0dc006fe09cd1a6303638a8b9">parameterCombination</a>, std::pair&lt; std::filesystem::path, std::set&lt; <a class="el" href="Types_8h.xhtml#a057a8240c128713802bc4f54e877e8df">runId</a> &gt; &gt;, <a class="el" href="structCmpVectorSharedParameter.xhtml">CmpVectorSharedParameter</a>, std::allocator&lt; std::pair&lt; const <a class="el" href="Types_8h.xhtml#ac86955a0dc006fe09cd1a6303638a8b9">parameterCombination</a>, std::pair&lt; std::filesystem::path, std::set&lt; <a class="el" href="Types_8h.xhtml#a057a8240c128713802bc4f54e877e8df">runId</a> &gt; &gt; &gt;&gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMultithreaded.xhtml#a417daf5d214dc7046af294dba9979624">multithreadFunction</a> ()</td></tr>
<tr class="memdesc:a417daf5d214dc7046af294dba9979624 inherit pro_methods_classMultithreaded"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function that is executed by each thread.  <a href="classMultithreaded.xhtml#a417daf5d214dc7046af294dba9979624">More...</a><br /></td></tr>
<tr class="separator:a417daf5d214dc7046af294dba9979624 inherit pro_methods_classMultithreaded"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_attribs_classMultithreaded"><td colspan="2" onclick="javascript:toggleInherit('pro_attribs_classMultithreaded')"><img src="closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="classMultithreaded.xhtml">Multithreaded&lt; parameterCombination, std::pair&lt; std::filesystem::path, std::set&lt; runId &gt; &gt;, CmpVectorSharedParameter &gt;</a></td></tr>
<tr class="memitem:af49cb7239ee452d7c1d29ae50fe482a3 inherit pro_attribs_classMultithreaded"><td class="memItemLeft" align="right" valign="top">const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMultithreaded.xhtml#af49cb7239ee452d7c1d29ae50fe482a3">NR_THREADS</a></td></tr>
<tr class="memdesc:af49cb7239ee452d7c1d29ae50fe482a3 inherit pro_attribs_classMultithreaded"><td class="mdescLeft">&#160;</td><td class="mdescRight">Maximum number of concurrent threads to be used in ThreadPool.  <a href="classMultithreaded.xhtml#af49cb7239ee452d7c1d29ae50fe482a3">More...</a><br /></td></tr>
<tr class="separator:af49cb7239ee452d7c1d29ae50fe482a3 inherit pro_attribs_classMultithreaded"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af18b358906f0dd910122e6541c46f45e inherit pro_attribs_classMultithreaded"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classThreadsafeQueue.xhtml">ThreadsafeQueue</a>&lt; <a class="el" href="Types_8h.xhtml#ac86955a0dc006fe09cd1a6303638a8b9">parameterCombination</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMultithreaded.xhtml#af18b358906f0dd910122e6541c46f45e">queue</a></td></tr>
<tr class="memdesc:af18b358906f0dd910122e6541c46f45e inherit pro_attribs_classMultithreaded"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classThreadsafeQueue.xhtml" title="A container class of a queue that is safe for concurrent access of different threads.">ThreadsafeQueue</a> containing the arguments that have to be processed by the ThreadPool.  <a href="classMultithreaded.xhtml#af18b358906f0dd910122e6541c46f45e">More...</a><br /></td></tr>
<tr class="separator:af18b358906f0dd910122e6541c46f45e inherit pro_attribs_classMultithreaded"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_static_attribs_classStatus"><td colspan="2" onclick="javascript:toggleInherit('pro_static_attribs_classStatus')"><img src="closed.png" alt="-"/>&#160;Static Protected Attributes inherited from <a class="el" href="classStatus.xhtml">Status</a></td></tr>
<tr class="memitem:a75ea6f22c5e9b8faa6f8af43d0bc2eed inherit pro_static_attribs_classStatus"><td class="memItemLeft" align="right" valign="top">static const std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classStatus.xhtml#a75ea6f22c5e9b8faa6f8af43d0bc2eed">NO_STATUS_SUPPORT</a> = &quot;Component doesn't support status updates!&quot;</td></tr>
<tr class="memdesc:a75ea6f22c5e9b8faa6f8af43d0bc2eed inherit pro_static_attribs_classStatus"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default message returned by <a class="el" href="classStatus.xhtml#a1102f7349b421fca575e3685cb599fc9" title="Returns a string representing the current state of the implementing component.">getStatus</a> and <a class="el" href="classStatus.xhtml#a6dcff8054a96df8924cbbc4caf8472e3" title="Returns a string representing the current progress of the calculations of the implementing component.">getStatusBar</a> if the implementing class does not override the respective function.  <a href="classStatus.xhtml#a75ea6f22c5e9b8faa6f8af43d0bc2eed">More...</a><br /></td></tr>
<tr class="separator:a75ea6f22c5e9b8faa6f8af43d0bc2eed inherit pro_static_attribs_classStatus"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebc78bdfd2d9603aa3012e01b3cde5b1 inherit pro_static_attribs_classStatus"><td class="memItemLeft" align="right" valign="top">static const std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classStatus.xhtml#aebc78bdfd2d9603aa3012e01b3cde5b1">NO_NAME</a> = &quot;No name specified&quot;</td></tr>
<tr class="memdesc:aebc78bdfd2d9603aa3012e01b3cde5b1 inherit pro_static_attribs_classStatus"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default message returned by <a class="el" href="classStatus.xhtml#a9d07378cbe210558ebb6b410a9b3855e" title="Returns a string representing the name of the implementing component in natural language.">getName</a> if the implementing class does not override the function.  <a href="classStatus.xhtml#aebc78bdfd2d9603aa3012e01b3cde5b1">More...</a><br /></td></tr>
<tr class="separator:aebc78bdfd2d9603aa3012e01b3cde5b1 inherit pro_static_attribs_classStatus"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A class capable of running simulations with certain parameterCombinations. </p>

<p class="definition">Definition at line <a class="el" href="SimulationRunner_8h_source.xhtml#l00038">38</a> of file <a class="el" href="SimulationRunner_8h_source.xhtml">SimulationRunner.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a2a41b4b74ffb111ede54937551266a53"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2a41b4b74ffb111ede54937551266a53">&#9670;&nbsp;</a></span>SimulationRunner()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">SimulationRunner::SimulationRunner </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>threads</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a <a class="el" href="classSimulationRunner.xhtml" title="A class capable of running simulations with certain parameterCombinations.">SimulationRunner</a> which can use no more than the given number of threads to simulate parameterCombinations concurrently. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">threads</td><td>Maximum number of threads that may be used for concurrent simulations. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="SimulationRunner_8cpp_source.xhtml#l00011">11</a> of file <a class="el" href="SimulationRunner_8cpp_source.xhtml">SimulationRunner.cpp</a>.</p>

<p class="reference">References <a class="el" href="classMultithreaded.xhtml#abb856a33aad9a1cc76a91c15c40bef8e">Multithreaded&lt; Key, T, Compare, Allocator &gt;::Multithreaded()</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a884a6bee886f30ba251897387336f04b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a884a6bee886f30ba251897387336f04b">&#9670;&nbsp;</a></span>getName()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string SimulationRunner::getName </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns a string representing the name of the implementing component in natural language. </p>
<dl class="section return"><dt>Returns</dt><dd>A string containing the name of the component. </dd></dl>

<p>Reimplemented from <a class="el" href="classStatus.xhtml#a9d07378cbe210558ebb6b410a9b3855e">Status</a>.</p>

<p class="definition">Definition at line <a class="el" href="SimulationRunner_8cpp_source.xhtml#l00019">19</a> of file <a class="el" href="SimulationRunner_8cpp_source.xhtml">SimulationRunner.cpp</a>.</p>

<p class="reference">References <a class="el" href="classStatus.xhtml#a9d07378cbe210558ebb6b410a9b3855e">Status::getName()</a>.</p>

</div>
</div>
<a id="ac223588e17ea7c69402e75be1f1ef0e1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac223588e17ea7c69402e75be1f1ef0e1">&#9670;&nbsp;</a></span>getStatus()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string SimulationRunner::getStatus </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns a string representing the current state of the implementing component. </p>
<p>May contain values of class members or other meaningful information. The returned string is always visible in <a class="el" href="classStatusBar.xhtml" title="A class used to conduct command line output containing information about the state of the used Optimi...">StatusBar</a>. </p><dl class="section return"><dt>Returns</dt><dd>A string containing the state of the component. </dd></dl>

<p>Reimplemented from <a class="el" href="classStatus.xhtml#a1102f7349b421fca575e3685cb599fc9">Status</a>.</p>

<p class="definition">Definition at line <a class="el" href="SimulationRunner_8cpp_source.xhtml#l00023">23</a> of file <a class="el" href="SimulationRunner_8cpp_source.xhtml">SimulationRunner.cpp</a>.</p>

<p class="reference">References <a class="el" href="classStatus.xhtml#a1102f7349b421fca575e3685cb599fc9">Status::getStatus()</a>.</p>

</div>
</div>
<a id="af433c6cf68f7b9699251b96919d72152"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af433c6cf68f7b9699251b96919d72152">&#9670;&nbsp;</a></span>getStatusBar()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string SimulationRunner::getStatusBar </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns a string representing the current progress of the calculations of the implementing component. </p>
<p>The returned string is visible in <a class="el" href="classStatusBar.xhtml" title="A class used to conduct command line output containing information about the state of the used Optimi...">StatusBar</a>, when the component is actively calculating something. Must not exceed one console line! </p><dl class="section return"><dt>Returns</dt><dd>A string containing the progress of a calculation. </dd></dl>

<p>Reimplemented from <a class="el" href="classStatus.xhtml#a6dcff8054a96df8924cbbc4caf8472e3">Status</a>.</p>

<p class="definition">Definition at line <a class="el" href="SimulationRunner_8cpp_source.xhtml#l00027">27</a> of file <a class="el" href="SimulationRunner_8cpp_source.xhtml">SimulationRunner.cpp</a>.</p>

<p class="reference">References <a class="el" href="classStatus.xhtml#a6dcff8054a96df8924cbbc4caf8472e3">Status::getStatusBar()</a>.</p>

</div>
</div>
<a id="a37f73e47fd21b1167be2c44ab36e6254"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37f73e47fd21b1167be2c44ab36e6254">&#9670;&nbsp;</a></span>runSimulations()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::map&lt; <a class="el" href="Types_8h.xhtml#ac86955a0dc006fe09cd1a6303638a8b9">parameterCombination</a>, std::pair&lt; std::filesystem::path, std::set&lt; <a class="el" href="Types_8h.xhtml#a057a8240c128713802bc4f54e877e8df">runId</a> &gt; &gt;, <a class="el" href="structCmpVectorSharedParameter.xhtml">CmpVectorSharedParameter</a> &gt; SimulationRunner::runSimulations </td>
          <td>(</td>
          <td class="paramtype">const std::set&lt; <a class="el" href="Types_8h.xhtml#ac86955a0dc006fe09cd1a6303638a8b9">parameterCombination</a>, <a class="el" href="structCmpVectorSharedParameter.xhtml">CmpVectorSharedParameter</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>runs</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Simulates the given parameterCombinations concurrently and returns their respective results. </p>
<p>Basically calls <a class="el" href="classMultithreaded.xhtml#a1fcc1c0642faa664e11fefadde148b5f" title="Pushes given tasks into queue, creates concurrent threads and merges them when execution is done.">Multithreaded::runMultithreadedFunctions</a> which uses the ThreadPool pattern to parallelize the execution of <a class="el" href="classSimulationRunner.xhtml#adfe03a3ba517b5aca991dee71155bbec" title="Deals with the simulation of a single parameterCombination.">work</a>. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">runs</td><td>Set of parameterCombinations to be simulated. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A map which maps the given parameterCombinations to their respective result directory and runIds. </dd></dl>

<p class="definition">Definition at line <a class="el" href="SimulationRunner_8cpp_source.xhtml#l00015">15</a> of file <a class="el" href="SimulationRunner_8cpp_source.xhtml">SimulationRunner.cpp</a>.</p>

<p class="reference">References <a class="el" href="classMultithreaded.xhtml#a1fcc1c0642faa664e11fefadde148b5f">Multithreaded&lt; Key, T, Compare, Allocator &gt;::runMultithreadedFunctions()</a>.</p>

</div>
</div>
<a id="adfe03a3ba517b5aca991dee71155bbec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adfe03a3ba517b5aca991dee71155bbec">&#9670;&nbsp;</a></span>work()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::pair&lt;std::filesystem::path, std::set&lt;<a class="el" href="Types_8h.xhtml#a057a8240c128713802bc4f54e877e8df">runId</a>&gt; &gt; SimulationRunner::work </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="Types_8h.xhtml#ac86955a0dc006fe09cd1a6303638a8b9">parameterCombination</a>&#160;</td>
          <td class="paramname"><em>run</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">private</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Deals with the simulation of a single parameterCombination. </p>
<p>Overrides <a class="el" href="classMultithreaded.xhtml#a295f1db64506dc4054dc5d7bac9ba231" title="Function that should be executed concurrently on different arguments.">Multithreaded::work</a> and therefore can be executed concurrently. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">run</td><td>parameterCombination to be simulated. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A pair containing a path to the result directory and a set of runIds identifying the respective simulation runs. </dd></dl>

<p>Implements <a class="el" href="classMultithreaded.xhtml#a295f1db64506dc4054dc5d7bac9ba231">Multithreaded&lt; parameterCombination, std::pair&lt; std::filesystem::path, std::set&lt; runId &gt; &gt;, CmpVectorSharedParameter &gt;</a>.</p>

<p>Implemented in <a class="el" href="classPlexeSimulationRunner.xhtml#aa8dee29e4f5cc5566690d10f5d4d95a0">PlexeSimulationRunner</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/runner/<a class="el" href="SimulationRunner_8h_source.xhtml">SimulationRunner.h</a></li>
<li>src/runner/<a class="el" href="SimulationRunner_8cpp_source.xhtml">SimulationRunner.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="classSimulationRunner.xhtml">SimulationRunner</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1 </li>
  </ul>
</div>
</body>
</html>
