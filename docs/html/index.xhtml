<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Simopticon: Documentation</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Simopticon
   &#160;<span id="projectnumber">1.0</span>
   </div>
   <div id="projectbrief">A framework for the optimization of simulation parameters.</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('index.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="PageDoc"><div class="header">
  <div class="headertitle">
<div class="title">Documentation </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p><a class="anchor" id="md_README"></a> </p><hr  />
<ol type="1">
<li><a href="#overview">Overview</a></li>
<li><a href="#setup">Setup</a><ol type="a">
<li><a href="#requirements">Requirements</a></li>
<li><a href="#installation">Installation</a></li>
</ol>
</li>
<li><a href="#usage">Usage</a><ol type="a">
<li><a href="#configuration">Configuration</a></li>
<li><a href="#optimization">Optimization</a></li>
</ol>
</li>
<li><a href="#extension">Extension</a><ol type="a">
<li><a href="#development">Development</a></li>
<li><a href="#integration">Integration</a></li>
</ol>
</li>
</ol>
<hr  />
<h1><a class="anchor" id="autotoc_md3"></a>
Overview</h1>
<p><em>Simopticon</em> is a framework which automates the search for optimal parameters for simulated processes. The key strategy is to define parameters that shall be optimized, automatically run simulations with certain parameters, evaluate their performance by calculating a number rating (the lower, the better) and trying to find parameter combinations that minimize the rating.</p>
<p>The described process is distributed over four major components:</p>
<ol type="1">
<li><a class="el" href="classOptimizer.xhtml" title="A class containing an optimization strategy which searches the minimum of a blackbox function given t...">Optimizer</a>: An optimization strategy capable of finding the minimum of a blackbox function only accessible through argument-value pairs.</li>
<li><a class="el" href="classSimulationRunner.xhtml" title="A class capable of running simulations with certain parameterCombinations.">SimulationRunner</a>: A component used to run simulations with certain parameters automatically.</li>
<li><a class="el" href="classEvaluation.xhtml" title="A class capable of evaluating simulation results and scoring them with a value which is treated as th...">Evaluation</a>: A component capable of calculating a rating value based on result files of simulations.</li>
<li><a class="el" href="classController.xhtml" title="A class responsible for communication between Optimizer, SimulationRunner and Evaluation and also use...">Controller</a>: A component managing the optimization process and communication between <a class="el" href="classOptimizer.xhtml" title="A class containing an optimization strategy which searches the minimum of a blackbox function given t...">Optimizer</a>, <a class="el" href="classSimulationRunner.xhtml" title="A class capable of running simulations with certain parameterCombinations.">SimulationRunner</a> and <a class="el" href="classEvaluation.xhtml" title="A class capable of evaluating simulation results and scoring them with a value which is treated as th...">Evaluation</a>. Used to abstract components 1-3 from each other.</li>
</ol>
<p>Extensions of the framework may introduce new <a class="el" href="classOptimizer.xhtml" title="A class containing an optimization strategy which searches the minimum of a blackbox function given t...">Optimizer</a>, <a class="el" href="classSimulationRunner.xhtml" title="A class capable of running simulations with certain parameterCombinations.">SimulationRunner</a> and <a class="el" href="classEvaluation.xhtml" title="A class capable of evaluating simulation results and scoring them with a value which is treated as th...">Evaluation</a> implementations (see <a href="#extension">Extension</a>). Currently, there is only one implementation of each component, tailored for the optimization of platoon controllers using the <a href="https://plexe.car2x.org/">Plexe</a> framework.</p>
<p>The full API documentation may be found on <a href="https://peternaggschga.github.io/simopticon/">peternaggschga.github.io/simopticon</a> or in the comprehensive <a href="https://peternaggschga.github.io/simopticon/documentation.pdf">PDF file</a> provided. A more in-depth explanation of <em>Simopticon</em> and its design principles may be found in the <a href="https://peternaggschga.github.io/simopticon/thesis.pdf"><b>german</b> bachelor's thesis</a> that proposed the framework.</p>
<hr  />
<h1><a class="anchor" id="autotoc_md5"></a>
Setup</h1>
<h2><a class="anchor" id="autotoc_md6"></a>
Requirements</h2>
<p>The following sections describe the requirements your machine has to fulfill to run <em>Simopticon</em>. They may differ depending on the <a class="el" href="classOptimizer.xhtml" title="A class containing an optimization strategy which searches the minimum of a blackbox function given t...">Optimizer</a>, <a class="el" href="classSimulationRunner.xhtml" title="A class capable of running simulations with certain parameterCombinations.">SimulationRunner</a> and <a class="el" href="classEvaluation.xhtml" title="A class capable of evaluating simulation results and scoring them with a value which is treated as th...">Evaluation</a> implementations you plan to use, therefore, the implementations have their own dependency sections.</p>
<h3>Simopticon</h3>
<p>The framework itself is developed for Debian-based Unix/Linux machines. Other operating systems might work but are not actively supported. To be able to install the framework, you need the following software:</p>
<ul>
<li>Git (see <a href="#git">Git</a>)</li>
<li>CMake Version 3.25 or higher (see <a href="#cmake">CMake</a>)</li>
<li>Python3 development tools (see <a href="#python3-development-tools">Python3 Development Tools</a>)</li>
</ul>
<h3><a class="el" href="classPlexeSimulationRunner.xhtml" title="A class capable of starting platooning simulations in the Plexe framework with given parameterCombina...">PlexeSimulationRunner</a></h3>
<p>To enable simulations with Plexe, Version 3.1 of the framework must be installed. Refer to the <a href="https://plexe.car2x.org/building/">Plexe install guide</a> for more information. Please mind that you might want to install OMNeT++ Version 6 or higher in order to use the <a href="#constantheadway">ConstantHeadway</a> <a class="el" href="classEvaluation.xhtml" title="A class capable of evaluating simulation results and scoring them with a value which is treated as th...">Evaluation</a>, even though the installation guide might suggest an older version.</p>
<h3><a class="el" href="classConstantHeadway.xhtml" title="A wrapper for the constant_headway.py script.">ConstantHeadway</a></h3>
<p>To use the <a class="el" href="classConstantHeadway.xhtml" title="A wrapper for the constant_headway.py script.">ConstantHeadway</a> <a class="el" href="classEvaluation.xhtml" title="A class capable of evaluating simulation results and scoring them with a value which is treated as th...">Evaluation</a>, OMNeT++ Version 6 or higher is needed. Please refer to the <a href="https://doc.omnetpp.org/omnetpp/InstallGuide.pdf">OMNeT++ Install Guide</a> for more information on the requirements.</p>
<h2><a class="anchor" id="autotoc_md7"></a>
Installation</h2>
<h3>Prerequisites</h3>
<h4>Git</h4>
<p>Check whether Git is installed on your machine and install it if necessary using:</p>
<div class="fragment"><div class="line">sudo apt install git</div>
</div><!-- fragment --><h4>CMake</h4>
<p>CMake Version 3.25 or higher is needed for building <em>Simopticon</em>. If you don't have CMake installed, follow the guide below. If you have an older version installed, you must first remove it.</p>
<p>First, make sure to install g++ and OpenSSL Development tools.</p>
<div class="fragment"><div class="line">sudo apt install g++ libssl-dev</div>
</div><!-- fragment --><p>Then you need to download the latest version of CMake from their <a href="https://cmake.org/download/">download page</a> — search for the source distribution tar package. Unpack the downloaded package using:</p>
<div class="fragment"><div class="line">tar xf cmake-[version number].tar.gz</div>
</div><!-- fragment --><p>Open the newly created directory and run the configuration script with:</p>
<div class="fragment"><div class="line">cd cmake-[version number] &amp;&amp; ./configure</div>
</div><!-- fragment --><p>When the configuration has completed successfully, you are ready to build and install using:</p>
<div class="fragment"><div class="line">make -j $(nproc)</div>
<div class="line">sudo make install</div>
</div><!-- fragment --><p>You may remove the downloaded tar file and extracted directory if needed.</p>
<h4>Python3 Development Tools</h4>
<p>Check whether Python3 development tools are installed on your machine and install them if necessary using:</p>
<div class="fragment"><div class="line">sudo apt install python3-dev</div>
</div><!-- fragment --><h3>Simopticon</h3>
<p>Go to the directory you want to install <em>Simopticon</em> in, e.g. <code>~/src</code>. To get the source code, clone the git repository using:</p>
<div class="fragment"><div class="line">git clone https://github.com/PeterNaggschga/simopticon.git</div>
</div><!-- fragment --><p>Create a build directory in the downloaded files with:</p>
<div class="fragment"><div class="line">mkdir simopticon/build</div>
<div class="line">cd simopticon/build</div>
</div><!-- fragment --><p>Build <em>Simopticon</em> by calling:</p>
<div class="fragment"><div class="line">cmake ..</div>
<div class="line">make -j  $(nproc)</div>
</div><!-- fragment --><p>The resulting executable <code>simopticon</code> may be copied to other locations or referenced via symlinks for more convenient access. The same applies to the <code>config</code> directory in <code>~/src/simopticon</code> which is used to configure the optimization process (see <a href="#usage">Usage</a>).</p>
<hr  />
<h1><a class="anchor" id="autotoc_md9"></a>
Usage</h1>
<h2><a class="anchor" id="autotoc_md10"></a>
Configuration</h2>
<p>The optimization process and its components are configured using several JSON files. Default examples of such files can be found in the <code>config</code> directory. Be aware, however, that the default files in <code>config</code> must be edited before use, since some file paths must be set which depend on your filesystem.</p>
<p>The options in the JSON files are commented and therefore self-explanatory. The following sections only show options that must be changed to successfully run optimizations.</p>
<h3>Main Configuration</h3>
<p>The main configuration can be found in <code>config/simopticon.json</code>. It contains settings of the <a class="el" href="classController.xhtml" title="A class responsible for communication between Optimizer, SimulationRunner and Evaluation and also use...">Controller</a> and selects the other components. In the <code>controller</code> settings, the key <code>params</code> must be set to reference another JSON file containing an array of <a class="el" href="classParameterDefinition.xhtml" title="A class storing information on the properties of parameters that are being optimized.">ParameterDefinition</a> that are to be optimized.</p>
<p>The main configuration selects which <a class="el" href="classOptimizer.xhtml" title="A class containing an optimization strategy which searches the minimum of a blackbox function given t...">Optimizer</a>, <a class="el" href="classSimulationRunner.xhtml" title="A class capable of running simulations with certain parameterCombinations.">SimulationRunner</a> and <a class="el" href="classEvaluation.xhtml" title="A class capable of evaluating simulation results and scoring them with a value which is treated as th...">Evaluation</a> implementations are to be used. For each of those components, a name of the implementation and a reference to a JSON file configuring it must be given. References are used because different implementations of the same component may vastly differ in their configurable options, and switching the used components gets easier this way.</p>
<h3><a class="el" href="classPlexeSimulationRunner.xhtml" title="A class capable of starting platooning simulations in the Plexe framework with given parameterCombina...">PlexeSimulationRunner</a></h3>
<p>If you want to use <a class="el" href="classPlexeSimulationRunner.xhtml" title="A class capable of starting platooning simulations in the Plexe framework with given parameterCombina...">PlexeSimulationRunner</a>, you need to configure <code>config/runners/plexe.json</code>. There you have to set the <code>configDirectory</code> key to match the path to the directory containing your Plexe configuration (<code>omnetpp.ini</code>). For default installations that should be something along the lines of <code>[installation-directory]/plexe/examples/platooning</code>.</p>
<h3><a class="el" href="classConstantHeadway.xhtml" title="A wrapper for the constant_headway.py script.">ConstantHeadway</a></h3>
<p>If you want to use <a class="el" href="classConstantHeadway.xhtml" title="A wrapper for the constant_headway.py script.">ConstantHeadway</a> evaluation, you need to configure <code>config/evaluations/constant_headway.json</code>. There you have to set the <code>pythonScript</code> and the <code>omnetppDirectory</code> keys. <code>pythonScript</code> must point to the script <code><a class="el" href="constant__headway_8py.xhtml" title="In this file, Python functionality for automatic rating of Plexe result files on the mean deviation f...">constant_headway.py</a></code> which can be found in <code>src/evaluation/constant_headway</code>. <code>omnetppDirectory</code> must point to the directory where OMNeT++ Version 6 or higher is installed, e.g. <code>~/src/omnetpp-6.0.1</code>.</p>
<h2><a class="anchor" id="autotoc_md11"></a>
Optimization</h2>
<p>The optimization is invoked on the command line by executing the program built in <a href="#setup">Setup</a>. The call on the command line has one mandatory and one optional argument. The First argument must be the path to the main config, i.e. <code>config/simopticon.json</code>. A valid call to an optimization could be:</p>
<div class="fragment"><div class="line">./simopticon ../config/simopticon.json</div>
</div><!-- fragment --><p>If a second argument is given, instead of running actual simulations with the configured <a class="el" href="classSimulationRunner.xhtml" title="A class capable of running simulations with certain parameterCombinations.">SimulationRunner</a> and evaluating their results with an <a class="el" href="classEvaluation.xhtml" title="A class capable of evaluating simulation results and scoring them with a value which is treated as th...">Evaluation</a>, the <a class="el" href="classStubController.xhtml" title="A class that mocks behaviour of Controller.">StubController</a> is used. <a class="el" href="classStubController.xhtml" title="A class that mocks behaviour of Controller.">StubController</a> can be used to implement and optimize benchmark functions to test <a class="el" href="classOptimizer.xhtml" title="A class containing an optimization strategy which searches the minimum of a blackbox function given t...">Optimizer</a> implementations without relying on actual costly simulations. The second argument holds the name of the function to be optimized, i.e., one of the following:</p>
<ul>
<li>quadratic (squares all <a class="el" href="classParameter.xhtml" title="A class acting as the container of the value of a parameter defined by a ParameterDefinition.">Parameter</a> values and adds them up)</li>
<li><a href="https://www.sfu.ca/~ssurjano/branin.html">branin</a></li>
<li><a href="https://www.sfu.ca/~ssurjano/goldpr.html">goldprice</a></li>
<li><a href="https://www.sfu.ca/~ssurjano/camel6.html">camel6</a></li>
<li><a href="https://www.sfu.ca/~ssurjano/shubert.html">shubert</a></li>
<li><a href="https://www.sfu.ca/~ssurjano/hart3.html">hartman3</a></li>
<li><a href="https://www.sfu.ca/~ssurjano/shekel.html">shekel5</a></li>
<li><a href="https://www.sfu.ca/~ssurjano/shekel.html">shekel7</a></li>
<li><a href="https://www.sfu.ca/~ssurjano/shekel.html">shekel10</a></li>
<li><a href="https://www.sfu.ca/~ssurjano/hart6.html">hartman6</a></li>
</ul>
<p>A valid call to the optimization of a benchmark function could be:</p>
<div class="fragment"><div class="line">./simopticon ../config/simopticon.json branin</div>
</div><!-- fragment --><p>Please note that you need to define the optimized parameters in <code>config/simopticon.json</code> even when you are optimizing a benchmark.</p>
<hr  />
<h1><a class="anchor" id="autotoc_md13"></a>
Extension</h1>
<p>This section goes through the steps you need to undertake to extend the framework with new <a class="el" href="classOptimizer.xhtml" title="A class containing an optimization strategy which searches the minimum of a blackbox function given t...">Optimizer</a>, <a class="el" href="classSimulationRunner.xhtml" title="A class capable of running simulations with certain parameterCombinations.">SimulationRunner</a> or <a class="el" href="classEvaluation.xhtml" title="A class capable of evaluating simulation results and scoring them with a value which is treated as th...">Evaluation</a> implementations.</p>
<h2><a class="anchor" id="autotoc_md14"></a>
Development</h2>
<p>When developing new implementations of components, please stick to the project structure — <a class="el" href="classOptimizer.xhtml" title="A class containing an optimization strategy which searches the minimum of a blackbox function given t...">Optimizer</a> extensions go into <code>src/optimizer</code>, <a class="el" href="classSimulationRunner.xhtml" title="A class capable of running simulations with certain parameterCombinations.">SimulationRunner</a> extensions go into <code>src/runner</code> and <a class="el" href="classEvaluation.xhtml" title="A class capable of evaluating simulation results and scoring them with a value which is treated as th...">Evaluation</a> extensions go into <code>src/evaluation</code>. If your implementation needs a more sophisticated implementation of the <a class="el" href="classParameter.xhtml" title="A class acting as the container of the value of a parameter defined by a ParameterDefinition.">Parameter</a> class than the ones provided in <code>src/parameters</code>, feel free to extend the abstract <a class="el" href="classParameter.xhtml" title="A class acting as the container of the value of a parameter defined by a ParameterDefinition.">Parameter</a> class.</p>
<p>Please document your code using <a href="https://www.doxygen.nl/">Doxygen</a> comments!</p>
<p>The <code><a class="el" href="Types_8h.xhtml" title="In this file, types are defined which should be used across the whole framework.">src/Types.h</a></code> header file defines framework-wide types such as <code>functionValue</code> for values returned by the <a class="el" href="classEvaluation.xhtml" title="A class capable of evaluating simulation results and scoring them with a value which is treated as th...">Evaluation</a> component or <code>coordinate</code> which is used to store <a class="el" href="classParameter.xhtml" title="A class acting as the container of the value of a parameter defined by a ParameterDefinition.">Parameter</a> values. The <code><a class="el" href="ComparisonFunctions_8h.xhtml" title="In this file, comparison functions are defined which should be used across the whole framework.">src/ComparisonFunctions.h</a></code> header file defines comparison functions, which can be used in STL containers that are ordered. E.g. <code><a class="el" href="structCmpVectorSharedParameter.xhtml" title="This struct implements the comparison of two vectors of Parameter references.">CmpVectorSharedParameter</a></code> can be used to compare two objects of type <code>vector&lt;shared_ptr&lt;<a class="el" href="classParameter.xhtml" title="A class acting as the container of the value of a parameter defined by a ParameterDefinition.">Parameter</a>&gt;&gt;</code>.</p>
<h3>Optimization Strategies</h3>
<p>To add a new optimization strategy, you have to extend the <a class="el" href="classOptimizer.xhtml" title="A class containing an optimization strategy which searches the minimum of a blackbox function given t...">Optimizer</a> class. You need to override the <a class="el" href="classOptimizer.xhtml#af9a3322b650a543d78c19a658d9319d4" title="Starts the optimization process.">Optimizer::runOptimization</a> method which should start the optimization process and only return when your strategy is finished or if the <a class="el" href="classAbortable.xhtml#aa93818ee48fcc8f9ed845215d533436d" title="Sets aborted to true.">Optimizer::abort</a> method is called which you should implement too.</p>
<p><a class="el" href="classOptimizer.xhtml" title="A class containing an optimization strategy which searches the minimum of a blackbox function given t...">Optimizer</a> extensions can instruct the <a class="el" href="classController.xhtml" title="A class responsible for communication between Optimizer, SimulationRunner and Evaluation and also use...">Controller</a> to start simulations and evaluate them with the <a class="el" href="classOptimizer.xhtml#a10c14e49cea1f9dfbb0fed45b93c6fc9" title="Requests the values when using certain parameterCombinations from controller.">Optimizer::requestValues</a> method. Please try to commission as many Parameters as possible in one call of the method so the other components may parallelize calculations.</p>
<p>Please consider overriding the methods provided by the <a class="el" href="classStatus.xhtml" title="An interface defining functions for status updates on configuration and progress of a class.">Status</a> interface to give the user a sense of what is happening.</p>
<h3>Simulation Execution</h3>
<p>To add a new way of executing simulations, you have to extend the <a class="el" href="classSimulationRunner.xhtml" title="A class capable of running simulations with certain parameterCombinations.">SimulationRunner</a> class. You need to override the <a class="el" href="classSimulationRunner.xhtml#adfe03a3ba517b5aca991dee71155bbec" title="Deals with the simulation of a single parameterCombination.">SimulationRunner::work</a> function, which is run concurrently for all <a class="el" href="classParameter.xhtml" title="A class acting as the container of the value of a parameter defined by a ParameterDefinition.">Parameter</a> vectors provided to <a class="el" href="classSimulationRunner.xhtml#a37f73e47fd21b1167be2c44ab36e6254" title="Simulates the given parameterCombinations concurrently and returns their respective results.">SimulationRunner::runSimulations</a>. If you want to prohibit concurrent execution, you may override <a class="el" href="classSimulationRunner.xhtml#a37f73e47fd21b1167be2c44ab36e6254" title="Simulates the given parameterCombinations concurrently and returns their respective results.">SimulationRunner::runSimulations</a> instead (in that case, <a class="el" href="classSimulationRunner.xhtml#adfe03a3ba517b5aca991dee71155bbec" title="Deals with the simulation of a single parameterCombination.">SimulationRunner::work</a> should return an empty pair). See documentation of <a class="el" href="classMultithreaded.xhtml" title="A class implementing concurrent execution of the same function for different arguments.">Multithreaded</a> class for more information on that.</p>
<p><a class="el" href="classSimulationRunner.xhtml#adfe03a3ba517b5aca991dee71155bbec" title="Deals with the simulation of a single parameterCombination.">SimulationRunner::work</a> should run a simulation with the given parameters and return a path to the result files and a set of identifiers relating to simulation runs. The interface for the identifiers is very loosely defined — if your <a class="el" href="classEvaluation.xhtml" title="A class capable of evaluating simulation results and scoring them with a value which is treated as th...">Evaluation</a> does not need any identifiers of simulation runs, you may return an empty set. Please be aware that the <a class="el" href="classController.xhtml" title="A class responsible for communication between Optimizer, SimulationRunner and Evaluation and also use...">Controller</a> might try to delete the path you return after some time, so that should not be an empty path! Other than that, it is not further standardized what must be returned as a path and identifiers as long as your <a class="el" href="classEvaluation.xhtml" title="A class capable of evaluating simulation results and scoring them with a value which is treated as th...">Evaluation</a> component can evaluate the simulation based on the returned information.</p>
<p>Please consider overriding the methods provided by the <a class="el" href="classStatus.xhtml" title="An interface defining functions for status updates on configuration and progress of a class.">Status</a> interface to give the user a sense of what is happening.</p>
<h3>Simulation <a class="el" href="classEvaluation.xhtml" title="A class capable of evaluating simulation results and scoring them with a value which is treated as th...">Evaluation</a></h3>
<p>To add a new rating algorithm based on simulation data, you have to extend the <a class="el" href="classEvaluation.xhtml" title="A class capable of evaluating simulation results and scoring them with a value which is treated as th...">Evaluation</a> class. You need to override the <a class="el" href="classEvaluation.xhtml#a55e7851f5acc8fed0004f0845ed7395d" title="Returns a value to the results of a single simulation run.">Evaluation::processOutput</a> function, which conducts the rating of simulation performance based on the path to the result files and the given identifiers. This process heavily depends on the implemented <a class="el" href="classSimulationRunner.xhtml" title="A class capable of running simulations with certain parameterCombinations.">SimulationRunner</a>, which is responsible for returning result files and run identifiers if necessary. Your <a class="el" href="classEvaluation.xhtml" title="A class capable of evaluating simulation results and scoring them with a value which is treated as th...">Evaluation</a> implementation should rate the given simulation results with a <code>functionValue</code> — the lower, the better.</p>
<p>Please consider overriding the methods provided by the <a class="el" href="classStatus.xhtml" title="An interface defining functions for status updates on configuration and progress of a class.">Status</a> interface to give the user a sense of what is happening.</p>
<h2><a class="anchor" id="autotoc_md15"></a>
Integration</h2>
<p>All newly added classes must be registered in <code>CMakeList.txt</code> so the compiler does not ignore them! External dependencies and added libraries should be included there too.</p>
<p>To make your new component available for configuration, you must add it to the constructor of the <a class="el" href="classController.xhtml" title="A class responsible for communication between Optimizer, SimulationRunner and Evaluation and also use...">Controller</a> class. Let's assume you wrote a new <a class="el" href="classOptimizer.xhtml" title="A class containing an optimization strategy which searches the minimum of a blackbox function given t...">Optimizer</a> implementation. First you need to create a JSON configuration file in <code>config/optimizer</code>. There you can define any desired options for your component.</p>
<p>The next step is editing the <a class="el" href="classController.xhtml" title="A class responsible for communication between Optimizer, SimulationRunner and Evaluation and also use...">Controller</a> class to make your <a class="el" href="classOptimizer.xhtml" title="A class containing an optimization strategy which searches the minimum of a blackbox function given t...">Optimizer</a> available. To do that, you find the "Optimizer settings" in the constructor of the <a class="el" href="classController.xhtml" title="A class responsible for communication between Optimizer, SimulationRunner and Evaluation and also use...">Controller</a>. There you add another case to the <code>if</code>-Statement where <code>opt</code> equals the name of your component (this is the name that will be set in the main config later, see <a href="#configuration">Configuration</a>). In the added case you can read the necessary options from the JSON object in <code>optimizerConfig</code>. You have to set <a class="el" href="classController.xhtml#a1d4cdec09fa091d4725076c0bff594cc" title="Optimizer defining an optimization strategy.">Controller::optimizer</a> to an <code>unique_ptr&lt;<a class="el" href="classOptimizer.xhtml" title="A class containing an optimization strategy which searches the minimum of a blackbox function given t...">Optimizer</a>&gt;</code>, owning a new instance of your <a class="el" href="classOptimizer.xhtml" title="A class containing an optimization strategy which searches the minimum of a blackbox function given t...">Optimizer</a> implementation.</p>
<p>When this setup is complete, you may build the framework again and update the main configuration to use your new <a class="el" href="classOptimizer.xhtml" title="A class containing an optimization strategy which searches the minimum of a blackbox function given t...">Optimizer</a> by changing the <code>optimizer.optimizer</code> key to the name of your <a class="el" href="classOptimizer.xhtml" title="A class containing an optimization strategy which searches the minimum of a blackbox function given t...">Optimizer</a> and the <code>optimizer.config</code> key to the path of your created JSON configuration file. </p>
</div></div><!-- PageDoc -->
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1 </li>
  </ul>
</div>
</body>
</html>
